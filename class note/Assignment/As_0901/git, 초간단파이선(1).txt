1.

Git:프로젝트의 어떤 부분도 겹쳐쓰지 않게 프로젝트의 변경을 관리하는 버전관리 소프트웨어이다.

 

GitHub: 깃을 사용하는 프로젝트를 지원하는 웹 호스팅 서비스이다.

 

1.1 새로운 저장소  만들기

-폴더를 하나 만든뒤 그 안에서 git init 명령어를 입력하여  새로운 git저장소를 만든다.

 

1.2 저장소 받아오기

-로컬 저장소 복제: git clone/로컬/저장소/경로

-원격 서버의 저장소 복제: git clone 사용자명@호스트:/:/원격/원격/저장소/경로

 

1.3 작업의 흐름

자신의 로컬 저장소는 git이 관리하는 세 그루의 나무로 구성돼있다.

-첫번째, 작업 디렉토리(Working directory)는 실제 파일들로 이루어져있다.

-두번째, 인덱스(Index)는 준비영역(staging area)의 역할이다.

-세번째, HEAD는 최종 확정본(commit)을 나타낸다.

 

1.4 추가와 확정

-추가: git add<파일 이름>,git add*로 (인덱스에)추가 할 수 있다.->작업의 흐름 첫단계에 해당

-확정: git commit -m"이번 확정본에 대한 설명" 을 입력하면 변경된 파일이 HEAD에 반영됀다.

 

1.5 변경내용 발행(push) 하기

-로컬저장소의 HEAD안에 머물고 있는 변경내용 원격서버로 올리기: git push origin maste(다른 가지를

발행 하려면 master를 원하는 가지이름으로 바꾼다.)

-원격서버의 주소를 git에 넘겨주는법: git remote add origin<원격 서버 주소>를 이용해 변경 내용을 원격서버로 발행가능하다.

 

1.6 가지(branch) 치기

-가지:격리된 상태에서 무언가를 만들때 사용

-새로운 저장소를 만들면 기본으로 master가지가 만들어진다.

-다른가지에서 개발진행 후 , master가지로 돌아와 병합.

 

-가지를 만들고 갈아타는법: git checkout -b 이름 명령어를 이용한다.

-master가지로 돌아오는법: git checkout master 명령어를 이용한다.

-가지 삭제하는 법: git branch -d 이름 명령어를 이용한다.

-새로만든 가지를 원격저장소로 전송하지 않으면 다른사람이 접근할 수 없다.

 

1.7갱신과 병합(merge)

-로컬저장소를 원격저장소에 맞춰 갱신 하는법: git pull 명령어를 이용하면 받아지고(fetch), 병합(merge)된다.

-다른 가지 변경내용을 현재가지에 저장하는법: git merge<가지 이름>명령어를 이용한다.

-충돌이 일어났을 때 직접수정하여 다시 병합할때 git add<파일이름>

-변경 내용 병합 전후 비교하는법:git diff<원래가지><비교 대상 가지>

 

1.8꼬리표(tag)달기

소프트웨어 새 버전이 나올때마다 꼬리표를 달아놓으면 좋다.

-꼬리표 다는법: git tag 1.0.0 확장본 식별자 명령어를 이용한다.

-확장본 식별자 얻는법: git log 식별자 명령어를 이용한다

-앞부분의 일부만 입력해도 꼬리표는 붙일수있지만 고유하다는 조건이 필요하다.

 

1.9로컬 변경 내용 되돌리기

- git checkout --<파일이름>을 이용하여 변경 전 상태(HEAD)로 되돌릴수있다. 다만 인덱스에 추가된 변경 내용과 

새로 생성한 피일은 그대로 남는다.

 

-모든 변경 내용과 확정본을 포기하는법: git fetch origin을 이용해 원격저장소의 최신이력을 가져온뒤,

git reset --hard origin/master 로컬 마스터가지가 저 이력을 가리키도록 한다. 

 

1.10 팁

-git 내장 GUI: gitk

-콘솔에서 git output을 컬러로 출력하는법: git config color.ui true

-이력(log)에서 확정본 1개를 딱한줄로 표시하기: git config format.pretty oneline

-대화식 파일 추가: git add -i

 

2.

파이썬이 직관적이고 문법도 엄청 쉽습니다. 하지만 C++공부만 해본 입장으로는 수정이 번거롭고 어떻게 객체지향 프로그래밍이 가능할지 궁금합니다. 현재로서는 오히려 구조적 프로그래밍이랑 더 비슷하다는 생각이듭니다.

그래도 결과들이 한번에 보이기 때문에 오류 수정에 있어서 훨씬 용이해 보입니다. 하지만 위에서 말했듯이

클래스 파일을 헤더랑 cpp로 나누어서 코딩을 했기 때문인지 어떻게 유기적으로 객체지향 프로그래밍을 할 수 있을지 궁금합니다.

일단 사칙연산 부분은 C랑 유사하지만 나눗셈에서 /와//의차이가 달랐고 제곱근을 따로쓸수있는게 신기했습니다.

그리고 변수타입을 자동으로 지정해주어서 편리하다고 느꼈습니다.

문자열을 관리하는면에 있어서도 C,C++보다 편리하게 관리할수있다고 생각했습니다.

그리고 list,dict,tuple,set 등의 복합데이터 타입은 아직 조금 낮설어서 조금더 공부해 익숙해져야 할것 같다고 느꼈습니다.

 

>>> 10+3

13

>>> 55-10

45

>>> 8*45

360

>>> 360/6

60.0

>>> 250//5

50

>>> 5/3

1.6666666666666667

>>> 5/3

1.6666666666666667

>>> 9%3

0

>>> 7.8%6

1.7999999999999998

>>> 5//3

1

>>> 3.141592*4*4

50.265472

>>> 3.141592*4**2

50.265472

>>> 3.141592*(9**2)

254.468952

>>> 3.141592*(20**2)

1256.6368

>>> 3.141592*(1.5**2)

7.068582

>>> 3.14*(6.7**2)

140.9546

>>> pi=3.1415926535

>>> 

>>> pi*3**2

28.2743338815

>>> pi*2.5**2

19.634954084375

>>> print(pi)

3.1415926535

>>> r=8

>>> 

>>> area=pi*r**2

>>> 

>>> print(area)

201.061929824

>>> 

>>> r=11

>>> 

>>> area=pi*r**2

>>> 

>>> print(area)

380.1327110735

>>> name1="Hello"

>>> name2="월드"

>>> 

>>> 

>>> print(name1)

Hello

>>> print(name2)

월드

>>> order=4

>>> pi=3.141592

>>> name="Hello world"

>>> type(order)

<class 'int'>

>>> type(pi)

<class 'float'>

>>> type(name)

<class 'str'>

>>> 5>4

True

>>> 3<2

False

>>> -1==-1

True

>>> 10>=10

True

>>> a=365>366

>>> print(a)

False

>>> type(a)

<class 'bool'>

>>> name3=name1+" "+name2

>>> name

'Hello world'

>>> name3

'Hello 월드'

>>> name1**2

Traceback (most recent call last):

  File "<pyshell#54>", line 1, in <module>

    name1**2

TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'

>>> name1*2

'HelloHello'

>>> name2[0]

'월'

>>> name1[0:2]

'He'

>>> name1[3:4]

'l'

>>> lol=['ash','jax','jin']

>>> lol

['ash', 'jax', 'jin']

>>> lol.append('sete')

>>> lol

['ash', 'jax', 'jin', 'sete']

>>> lol.sort()

>>> lol

['ash', 'jax', 'jin', 'sete']

>>> len(lol)

4

>>> lck=['faker','doran','bdd']

>>> riot=lol+lck

>>> riot

['ash', 'jax', 'jin', 'sete', 'faker', 'doran', 'bdd']

>>> riot[1]

'jax'

>>> riot[-1]

'bdd'

>>> riot[:3]

['ash', 'jax', 'jin']

>>> riot[-3:]

['faker', 'doran', 'bdd']

>>> score={'faker':80,'bdd':85,'doran':98}

>>> type(score)

<class 'dict'>

>>> score['faker]

      

SyntaxError: EOL while scanning string literal

>>> score['faker']

80

>>> score

{'faker': 80, 'bdd': 85, 'doran': 98}

>>> score.keys()

dict_keys(['faker', 'bdd', 'doran'])

>>> score.values()

dict_values([80, 85, 98])

>>> 'showmaker'in score

False

>>> 'faker'in score

True

>>> t1=(1,2,3)

>>> t2=(1,)

>>> t3=()

>>> t4=1,2,3,4

>>> t4

(1, 2, 3, 4)

>>> type(t4)

<class 'tuple'>

>>> t5=(1,'a',"park",(1,2))

>>> t1[1:]

(2, 3)

>>> t2+t5

(1, 1, 'a', 'park', (1, 2))

>>> t1*t1

Traceback (most recent call last):

  File "<pyshell#92>", line 1, in <module>

    t1*t1

TypeError: can't multiply sequence by non-int of type 'tuple'

>>> t4*2

(1, 2, 3, 4, 1, 2, 3, 4)

>>> s1={1,2,3}

>>> type(s1)

<class 'set'>

>>> s1={1,2,2,4}

>>> s1

{1, 2, 4}

>>> s2={3,5,6,7}

>>> s1+s2

Traceback (most recent call last):

  File "<pyshell#99>", line 1, in <module>

    s1+s2

TypeError: unsupported operand type(s) for +: 'set' and 'set'

>>> s1|s2

{1, 2, 3, 4, 5, 6, 7}

>>> s1&s2

set()

>>> s2-s1

{3, 5, 6, 7}

>>> s1-s2

{1, 2, 4}

>>> s1.add(8)

>>> s1

{8, 1, 2, 4}

>>> s1.remove(8)

>>> s1

{1, 2, 4}

>>> 

 