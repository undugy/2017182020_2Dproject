2017182020 양원석

 

1)



3번 과제의 명시된 것처럼 함수를 이용하여 해서 goto함수와 gotocircle함수를 만들었습니다. goto함수는 a,b를 인자로 받아서 turtle.penup()을 한 뒤 tultle.goto(a,b)로 이동하여 turtle.pendown()을 하는 함수입니다. 이 함수는 원하는 좌표로 이동할때 penup과pendown을 해야하는 번거러움을 없애주기 위해 만들었습니다.

 

그리고 저의 이름 특성상 "ㅇ"이 많이 들어가기 때문에 gotocircle함수를 만들었습니다. gotocircle함수는 a,b,c,d를 인자로 받습니다.  위에서 만든함수 goto(a,b)를하여 좌표를 이동한 뒤 turtle.setheading(c)를 하여 원을 그릴 방향을 설정한 후 

turtle.circle(d)를 하여 원을 그립니다. 이 함수는 원하는 위치,방향,크기로 원을 그리기 위해 만들었습니다. 

 

2)

for문을 이용하여 만들어 보려고 했지만 아직 실력이 부족하여 만들지 못햇습니다. 그래서 파이썬 기초(3)에 나온 예제를 보고

만들어 봤습니다.

 

3)

수학에서 함수는 ,어떤수식을  정의한 것 이다. ex) f(a,b)=a+b

프로그래밍에서 함수는 어떤 특정한 일을 처리하는 기능을 모아놓은 것이다.ex) turtle.forward(100),turtle.undo()

일반적으로 라이브러리,모듈은 여러개의 함수로 구성되어있다. 

자기 자신만의 함수를 만들수 있고 함수 이름은 그 함수의 기능을 정확히 나타내는게 좋다.

 

문법: def 함수명(매개변수):        ex) def add(a,b):

(들여쓰기)<수행할 문장1>                   sum= a + b

(들여쓰기)<수행할 문장2>                   return sum

...

 

def->함수의 정의임을 뜻함.

***들여쓰기가 매우 중요하다.***

-함수 정의 만으로는 실행되지않고 함수를 호출해야 실행이된다.

-함수를 호출하려면 함수정의가 먼저 되어 있어야 한다.

-여러 작업을 모아 하나로 처리 할 수 있게 해준다.

-여러개의 return값이 가능하다. ex) return a+b,a*b 

-인자 타입에 따라 자동으로 연산 기능이 결정된다.

 

4)

재귀함수 호출의 일반적인 개념

재귀함수 호출:함수 내부에서 함수가 자기 자신을 또 다시 호출하는 행위

-재귀 호출은 자기 자신을 계속해서 호출하므로, 끝없이 반복된다.

-함수 내에 재귀 호출을 중단하도록 조건이 변경될 명령문을 반드시 포함해야 한다.

(포함하지 않으면 스택오버플로우로 프로그램이 실행 직후 종료된다.) 

장점:코드의 간결함, 단점:무한 재귀호출의 위험성, 비재귀 호출보다 실행시간이 오래걸림

 

python에서 활용 예

예제 1)

0~n까지의 합계 구하기

 

def sum(n):

  if n==0;

    return 0

  return n+sum(n-1)

->n=0이면 합은 0이다. 따라서 0을 리턴한다.

->n이 0보다 크면 0에서 n 까지의 합은, n-1까지의 합에 n을 더한 것이다.

 

5)

fractal: 일부 작은 조각이 전체와 비슷한 기하학적 형태 

-프렉탈 구조:자기 유사성을 갖는 기하학적 구조

-수학적 도형으로도 연구되고 있으면 컴퓨터 소프트웨어를 이용해 재귀적이거나 반복적인 작업에 의한

반복되는 패턴으로 만들어진다.

-자연계에서 대표적으로 구름,산,번개,난류,해안선,나뭇가지가 프랙탈 구조에 해당된다.

-대표적인 도형: 망델브로 집합,칸토어 집합,시에르핀스키 삼각형, 페아노 곡선,코흐곡선

-네 가지 생성 기법에 따른 프렉탈 분류

1.시간매개형 프랙탈(궤도 프랙탈):대개 복소평면 상에서, 각각의 점이 발산하는 속도를 색으로 나타낸 이미지.

2.반복함수계:기하학적 대체 규칙에 의해 만들어진 도형

3.기이한 끌개: 주어진 사상이나 방정식의 해를 이용해 초기값을 반복적으로 변환한 것이면 혼돈이론과 관계된다.

4.무작위적 프랙탈: 결정론적이지 않고 추측 통계학적으로 만들어진 것

 

turtle graphics와의 관계 

turtle graphics와 위 에서 정리한 재귀 호출을 이용하여 fractal graphics를 표현 할 수 있다.

 

ex)코흐의 눈송이



 

 

-코흐 눈송이에서 프랙탈 규칙이 적용되기 전에는 삼각형이다.

-코흐 눈송이의 프랙탈 규칙: 코흐 눈송이를 이루는 한변의 1/3지점에 뿔이 나는 형태가 반복되는 것

-프랙탈이 발생하는곳: 코흐 눈송이의 각 변을 이루는 직선이고 코흐 곡선의 기본형태이다.

-코드로 나타내면 if n==0:                   로  나타낼 수 있다.

                         turtle.forward(길이)

-기본 형태가 아닌 부분은 프랙탈 규칙을 나타내야 한다. n=0이아닌 가장 작은 형태의 프랙탈은 n=1일때

나타난다. 

-위의 규칙을 분석하면

1.길이의 1/3만큼 앞으로 이동

2.왼쪽으로 60도 회전

3.길이의 1/3만큼 앞으로 이동

4.오른쪽으로 120도 회전

5.길이의 1/3만큼 앞으로 이동

6.왼쪽으로 60도 회전

7.길이의 1/3만큼 앞으로 이동

 

-여기서 1,3,5,7에 해당하는 규칙은, n=1일때는 코흐곡선이 n=0일 때 나타나는 형태인 직선으로 그려진다.

-n=2 이상부터는 한 단계 낮은 프랙탈 규칙을 띄는 형태로 그려진다. 따라서 n=0이 아닌 경우를 일반화하면

n-1프랙탈로 표현 할 수 있다.

-프랙탈과 유사한 재귀호출을 활용하여 코드를 작성하면

(위의 코드와 이어진다.)

else :

  koch(길이/3,n-1)

  turtle.left(60)

  koch(길이/3,n-1)

  turtle.right(120)

  koch(길이/3,n-1)

  turtle.left(60)

  koch(길이/3,n-1)
 