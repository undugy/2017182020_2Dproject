import math -----> 밑에 distance를 계산을 위한 sqrt()함수를 쓰기위해 math추가
 
# arguments: pos, delta, target -----> 인수 pos,delta,target으로 구성
# - pos = (x, y) tuple  ----->pos는 현재 위치 좌표를 의미하며  (x,y)는 tuple로 만들어졌다.
# - delta = (dx, dy) tuple ----->목적지 좌표에서 현재위치 좌표를 뺀값, 즉 x,y의 변화량 의미하며 (dx,dy)는 tuple로 만들어졌다.
# - target = (x, y) tuple -----> 목적지의 좌표를 의미하며 (x,y)는 tuple로 만들어졌다.
# returns: (pos, done) ----->return 값은 현재위치와,목적지 도착(도착 시:True, 미 도착:False) 여부이다.
# - pos = (x, y) tuple ----->pos는 현재 위치 좌표를 의미하며  (x,y)는 tuple로 만들어졌다.
# - done = True if arrived ----->done은 목적지에 도착했을때 True,도착하지 못했을때 False를 표현한다.
def move_toward(pos, delta, target): ----->어느 쪽으로 움직이는 함수 선언, 인자:pos,delta,target
    done = False ->done의 초기값을 False로 초기화한다 이후에 목적지 도착 조건을 만족 했을때 True를 넣어준다.
    x,y = pos[0] + delta[0], pos[1] + delta[1] -----> 인스턴스 x에 현재위치의 x(pos[0])좌표에 x(delta[0])의 변화량을 더한 값과 인스턴스 y에 현재위치의 y(pos[1])좌표에 y(delta[1])의 변화량을 더한 값을 넣어준다.
 
    if delta[0] > 0 and x >= target[0] or delta[0] < 0 and x <= target[0]: ----->만약 x의 변화량이 0보다 크고 인스턴스 x가 목적지 x좌표보다 크거나 같을때 또는 x의 변화량이 0보다 작고 인스턴스 x가 목적지 x좌표보다 작거나 같다면 목적지에 도착이므로 done에 True를 넣어준다 
        done = True
    if delta[1] > 0 and y >= target[1] or delta[1] < 0 and y <= target[1]: ----->만약 x의 변화량이 0보다 크고 인스턴스 x가 목적지 x좌표보다 크거나 같을때  또는 x의 변화량이 0보다 작고 인스턴스 x가 목적지 x좌표보다 작거나 같다면 목적지에 도착이므로 done에 True를 넣어준다 
        done = True
 
    pos = target if done else (x,y)  ----->만약 done이 True라면 현재위치 좌표에 목적지 좌표를 넣어준다. False인 경우에는 인스턴스 x,y를 넣어준다. 
 
    return (pos, done) ----->현재위치와 도착상태를 반환한다.
 
# arguments: pos, target, speed -----> 인수 pos,delta,speed으로 구성
# - pos = (x, y) tuple ----->pos는 현재 위치 좌표를 의미하며  (x,y)는 tuple로 만들어졌다.
# - target = (x, y) tuple -----> 목적지의 좌표를 의미하며 (x,y)는 tuple로 만들어졌다.
# - speed = pixels per frame ----->speed는 픽셀 당 프레임을 나타낸다.
# returns: (dx, dy) -----> 리턴값 x,y의 변화량
# - x/y pixels per frame
def delta(pos, target, speed): ----->변화량 함수선언, 인자:현재위치좌표 ,목적지좌표, 픽셀당 프레임
    dx, dy = target[0] - pos[0], target[1] - pos[1] -----> dx,dy에 각각 목적지좌표에서 현재위치좌표를 뺀 값을 넣어준다.
    distance = math.sqrt(dx**2 + dy**2) ----->인스턴스 distance에 현재위치 부터 목적지까지의 거리를 넣어준다. 루트계산을 위해 math.sqrt를 사용하였다.
    if distance == 0: return 0, 0  ----->만약 거리가 0이라면 pos와 target이 0이므로 두 위치가 같아 변화량이 없다.
    return dx * speed / distance, dy * speed / distance ----->변화량과 스피드는 비례하게 설정하였고 거리는 반비례하게 설정하였다.
 
 
 
 
# object version
 
def move_toward_obj(obj): ----->오브젝트에 위의 함수를 적용하기 위해 인자로 obj를 받는다.
    if obj.target == None: return-----> 만약에 오브젝트의 목적지에 아무 값도 없다면 None을 리턴한다.
    pos, done = move_toward(obj.pos, obj.delta, obj.target) ----->move_toward에 오브젝트의 현재위치,변화량,목적지를 인자로 넣어주고 인스턴스pos,done에 린턴값을 넣어준다.
    if done: -----> 만약 목적지에 도착하면 목적지를 None으로 초기화해주고 변화량도 각각0으로 초기화해준다.
        obj.target = None
        obj.delta = 0,0
 
    obj.pos = pos ----->오브젝트의 현재위치에 인스턴스pos의 값을 넣어준다.
 
def set_target(obj, target):-> 목적지 설정 함수, 인자:오브젝트,목적지
    obj.target = target->오브젝트의 목적지에 인자로 받은 목적지 좌표를 넣어준다.
    obj.delta = 0,0 if target is None else delta(obj.pos, target, obj.speed) ----->만약 목적지가 없으면 오브젝트의 변화량에 0을 넣어주고  그외에 경우에는 delta함수에 오브젝트의 현재위치, 인자로 받은 목적지,오브젝트의 픽셀당 프레임 값을 넣어주어 delta의 리턴값을 오브젝트의델타에 넣어준다. 
 
분석결과)
helper.py는 어느쪽으로 움직이기 위한 파일로 move_toward 함수는 어디에서 어디까지 움직이는지 체크해주고
현재좌표에 변화량을 더해주어 목적지에 도달했는지를 체크해준다.
delta함수는 변화량을 계산해주고 스피드값을 넣을수 있게하여 도달 속도를 조절할수 있도록 해주었다. 이러한 기능들을 이용하면 현재위치에서 자신이 원하는위치까지 가기 용이하도록 만들어져있어 매번 간편하게 자신이 원하는 좌표로 이동 할 수있게 해주는 모듈인 것 같다고 생각한다. 
2)
 마우스 입력 처리 파일
3)
3-1)
- 마우스 오른쪽 클릭을 1번 할 때 스피드 1.
 
- 움직이는 도중에 클릭을 하면 스피드 2. 클릭 할 때마다 속도가 증가한다.
 
- 일단 목적지에 도달하면 다음번 마우스 클릭을 할 때 다시 속도 1 부터 시작한다.
아래와 같이 모든 내용을 구현하였습니다.
Boy클래스에 speed를 추가하여  handle_events()에서 마우스의 오른쪽을
한번 누를때마다 boy.speed를 1증가 하도록 하였습니다.
3-2와 중복이 가능하다고 하셨지만 확인할 때 오른쪽을 눌러서 하면 확인이 더 용이할것 같아서 오른쪽을 눌렀을 때 스피드가 증가하도록 하였습니다.
만약 목적지에 도달했을 경우 Boy의 update 함수 안에서 if문으로 done이 True일 경우 스피드를 다시 원래대로 초기화 되게 하였습니다.
3-2)
 - 마우스 왼쪽을 클릭을 할 때마다 목적지 list 에 추가. 3-1 과 중복 적용 가능.
 
- 목적지에 도달하면 다음 목적지를 향해 출발
 
- 마지막 목적지에 도달하면 멈춤
본문의 내용을 모두 적용하였고 추가로 목적지를 선택하는 키와 스피드를 올리는 키를 분류했습니다.
마우스 왼쪽을 클릭할 경우 target_list에 목적지 좌표를 append를 사용하여 넣어주고 target에 넣어주어 이동한 후에
다음 목적지에 도착하면 count를 1증가시켜 target에 target_list의 다음 인덱스를 자동으로 넣어주어
클릭한 만큼 가도록 하였습니다.  그 후 원하는 만큼 이동한 후에는 조건문에서 target_list 인덱스가 count보다 작을 경우 count를 1줄여주어 멈추도록 하였습니다.